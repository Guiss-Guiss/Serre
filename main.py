import threading
import time
from typing import Optional
from services.logging_service import ServiceLogging
from controllers.serre_controller import ControleurSerre
from controllers.api_controller import ControleurAPI
from models.exceptions import CapteurError
from services.pushover_service import NotificationMessage

class Application:

    def __init__(self):
        self.logging_service = ServiceLogging("serre")
        self.logger = self.logging_service.get_logger
        
        self.logger.info("D√©marrage de l'application")
        
        self.serre_controller = ControleurSerre()
        self.api_controller = ControleurAPI(self.serre_controller)
        
        notification = NotificationMessage(
            "üå± Syst√®me de gestion de la serre d√©marr√©",
            priorit√©=0
        )
        self.serre_controller.pushover.envoyer_notification(notification)
        
        self.echecs_consecutifs = 0
        self.SEUIL_ECHECS = 3
        
        self.thread_controle: Optional[threading.Thread] = None

    def boucle_controle(self) -> None:
        self.logger.info("D√©marrage de la boucle de contr√¥le")
        
        while not self.serre_controller.systemd.stopping:
            try:
                donn√©es = self.serre_controller.lire_capteur()
                
                if donn√©es:
                    if self.echecs_consecutifs > 0:
                        self.logger.info(
                            f"Connexion r√©tablie apr√®s {self.echecs_consecutifs} √©checs"
                        )
                        notification = NotificationMessage(
                            "‚úÖ Connexion aux capteurs r√©tablie",
                            priorit√©=0
                        )
                        self.serre_controller.pushover.envoyer_notification(notification)
                        self.echecs_consecutifs = 0
                        
                    self.serre_controller.g√©rer_environnement(donn√©es)
                    
                else:
                    self.echecs_consecutifs += 1
                    self.logger.warning(
                        f"Aucune donn√©e re√ßue (√©chec {self.echecs_consecutifs}/{self.SEUIL_ECHECS})"
                    )
                    
                    if self.echecs_consecutifs >= self.SEUIL_ECHECS:
                        self.logger.error("Activation du mode s√©curit√©")
                        notification = NotificationMessage(
                            "‚ö†Ô∏è √âchec de lecture des capteurs - Activation du mode s√©curit√©",
                            priorit√©=1
                        )
                        self.serre_controller.pushover.envoyer_notification(notification)
                        self.serre_controller.mode_s√©curit√©()
                        
            except CapteurError as e:
                self.echecs_consecutifs += 1
                self.logger.error(
                    f"Erreur lecture capteur (√©chec {self.echecs_consecutifs}/"
                    f"{self.SEUIL_ECHECS}): {str(e)}"
                )
                
                if self.echecs_consecutifs >= self.SEUIL_ECHECS:
                    notification = NotificationMessage(
                        f"‚ö†Ô∏è Erreur capteur - Activation du mode s√©curit√©: {str(e)}",
                        priorit√©=1
                    )
                    self.serre_controller.pushover.envoyer_notification(notification)
                    self.serre_controller.mode_s√©curit√©()
                    
            except Exception as e:
                self.logger.error(f"Erreur inattendue: {str(e)}")
                notification = NotificationMessage(
                    f"üö® Erreur syst√®me inattendue - Activation du mode s√©curit√©: {str(e)}",
                    priorit√©=2
                )
                self.serre_controller.pushover.envoyer_notification(notification)
                self.serre_controller.mode_s√©curit√©()
                
            finally:
                time.sleep(60)

    def d√©marrer(self) -> None:
        try:
            self.thread_controle = threading.Thread(
                target=self.boucle_controle,
                daemon=True
            )
            self.thread_controle.start()
            self.logger.info("Thread de contr√¥le d√©marr√©")
            
            self.logger.info("D√©marrage de l'API")
            self.api_controller.d√©marrer()
            
        except Exception as e:
            self.logger.critical(f"Erreur fatale au d√©marrage: {str(e)}")
            notification = NotificationMessage(
                f"üö® Erreur fatale au d√©marrage: {str(e)}",
                priorit√©=2
            )
            self.serre_controller.pushover.envoyer_notification(notification)
            raise

    def arr√™ter(self) -> None:
        self.logger.info("Arr√™t de l'application")
        notification = NotificationMessage(
            "‚ö†Ô∏è Arr√™t du syst√®me de gestion de la serre",
            priorit√©=1
        )
        self.serre_controller.pushover.envoyer_notification(notification)
        
        if self.thread_controle and self.thread_controle.is_alive():
            self.thread_controle.join(timeout=5)
            
        self.serre_controller.nettoyer()

def main():
    app = Application()
    try:
        app.d√©marrer()
    except KeyboardInterrupt:
        print("\nArr√™t demand√© par l'utilisateur")
    except Exception as e:
        print(f"Erreur fatale: {str(e)}")
    finally:
        app.arr√™ter()

if __name__ == "__main__":
    main()