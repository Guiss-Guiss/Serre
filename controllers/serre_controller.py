import threading
from typing import Optional, Dict, Any
from datetime import datetime, time as dtime
import logging
import RPi.GPIO as GPIO
from models.donnees_environnement import Donn√©esEnvironnement
from models.exceptions import ErreurRelais, ErreurCapteur
from services.pushover_service import ServicePushover, NotificationMessage
from services.systemd_service import ServiceSystemd
from config import GPIO_CONFIG, SEUILS_ENVIRONNEMENT, HORAIRES, ESP32_CONFIG

class ControleurSerre:
    def __init__(self):
        self.logger = logging.getLogger("serre.controller")
        self.pushover = ServicePushover()
        self.systemd = ServiceSystemd(cleanup_handler=self.nettoyer)
        
        self.en_mode_s√©curit√© = False
        self.alerte_temp_haute = False
        self.alerte_temp_basse = False
        self.RELAIS_ACTIF_BAS = True
        
        self._initialiser_gpio()
        self._dernieres_donnees: Optional[Donn√©esEnvironnement] = None
        self._verrou = threading.Lock()

    def _initialiser_gpio(self) -> None:
        try:
            GPIO.setmode(GPIO.BCM)
            GPIO.setwarnings(False)
            for nom_relais, pin in GPIO_CONFIG.items():
                GPIO.setup(pin, GPIO.OUT)
                GPIO.output(pin, GPIO.HIGH)
                self.logger.info(f"GPIO {pin} configur√© pour {nom_relais}")
        except Exception as e:
            self.logger.critical(f"Erreur fatale GPIO: {str(e)}")
            raise ErreurRelais("√âchec de l'initialisation GPIO")

    def contr√¥ler_relais(self, nom_relais: str, activer: bool) -> None:
        with self._verrou:
            try:
                if nom_relais not in GPIO_CONFIG:
                    raise ErreurRelais(f"Relais inconnu: {nom_relais}")
                
                # Si RELAIS_ACTIF_BAS est True, on inverse l'√©tat
                √©tat_gpio = GPIO.HIGH if (activer != self.RELAIS_ACTIF_BAS) else GPIO.LOW
                GPIO.output(GPIO_CONFIG[nom_relais], √©tat_gpio)
                
                self.logger.info(
                    f"Relais {nom_relais} {'activ√©' if activer else 'd√©sactiv√©'}"
                )
                
            except Exception as e:
                self.logger.error(f"Erreur contr√¥le relais {nom_relais}: {str(e)}")
                raise ErreurRelais(f"√âchec contr√¥le relais {nom_relais}")

    def lire_capteur(self) -> Optional[Donn√©esEnvironnement]:
        try:
            import requests
            response = requests.get(
                ESP32_CONFIG['url'],
                timeout=int(ESP32_CONFIG['timeout'])
            )
            
            if response.status_code != 200:
                raise ErreurCapteur(f"Erreur HTTP: {response.status_code}")
                
            donn√©es = response.json()
            
            self._dernieres_donnees = Donn√©esEnvironnement(
                temp√©rature=float(donn√©es['temperature']),
                humidit√©=float(donn√©es['humidite']),
                pression=float(donn√©es['pression']) * 10
            )
            
            return self._dernieres_donnees
            
        except Exception as e:
            self.logger.error(f"Erreur lecture capteur: {str(e)}")
            raise ErreurCapteur(f"√âchec lecture capteur: {str(e)}")

    def est_p√©riode_jour(self) -> bool:
        heure_actuelle = datetime.now().time()
        return dtime(
            # Gestion normale des √©quipements
        ) <= heure_actuelle <= dtime(
            HORAIRES['heure_fin_jour']
        )

    def mode_s√©curit√©(self) -> None:
        if not self.en_mode_s√©curit√©:
            self.logger.warning("ACTIVATION MODE S√âCURIT√â")
            try:
                self.contr√¥ler_relais('chauffage', True)
                self.contr√¥ler_relais('ventilation', False)
                self.contr√¥ler_relais('brumisation', False)
                self.contr√¥ler_relais('eclairage', not self.est_p√©riode_jour())
                
                notification = NotificationMessage(
                    "‚ö†Ô∏è ALERTE: Mode s√©curit√© activ√© dans la serre",
                    priorit√©=1
                )
                self.pushover.envoyer_notification(notification)
                
                self.en_mode_s√©curit√© = True
                
            except Exception as e:
                self.logger.critical(f"Erreur mode s√©curit√©: {str(e)}")

    def g√©rer_environnement(self, donn√©es: Donn√©esEnvironnement) -> None:
        try:
            self.logger.info(
                f"Gestion environnement - T: {donn√©es.temp√©rature}¬∞C, "
                f"H: {donn√©es.humidit√©}%, P: {donn√©es.pression}hPa"
            )

            if self.en_mode_s√©curit√©:
                notification = NotificationMessage(
                    "‚úÖ FIN ALERTE: Connexion capteurs r√©tablie",
                    priorit√©=0
                )
                self.pushover.envoyer_notification(notification)
                self.en_mode_s√©curit√© = False

            self._g√©rer_alertes_temp√©rature(donn√©es.temp√©rature)

            self._g√©rer_chauffage(donn√©es)
            self._g√©rer_ventilation(donn√©es)
            self._g√©rer_brumisation(donn√©es)
            self._g√©rer_eclairage()

        except ErreurCapteur as e:
            self.logger.error(f"Erreur lecture capteur: {str(e)}")
            self.mode_s√©curit√©()
        except Exception as e:
            self.logger.error(f"Erreur inattendue: {str(e)}")
            self.mode_s√©curit√©()

    def _g√©rer_alertes_temp√©rature(self, temp√©rature: float) -> None:
        if temp√©rature < SEUILS_ENVIRONNEMENT['temp_critique_min']:
            if not self.alerte_temp_basse and self.pushover.peut_envoyer_alerte('temp_basse'):
                self.logger.debug("Envoi alerte temp√©rature basse")
                notification = NotificationMessage(
                    f"ü•∂ ALERTE: Temp√©rature critique basse: {temp√©rature}¬∞C",
                    priorit√©=1
                )
                if self.pushover.envoyer_notification(notification):
                    self.alerte_temp_basse = True
                    
        elif temp√©rature > SEUILS_ENVIRONNEMENT['temp_critique_max']:
            if not self.alerte_temp_haute and self.pushover.peut_envoyer_alerte('temp_haute'):
                self.logger.debug("Envoi alerte temp√©rature haute")
            # Gestion normale des √©quipements
                notification = NotificationMessage(
                    f"üî• ALERTE: Temp√©rature critique haute: {temp√©rature}¬∞C",
                    priorit√©=1
                )
                if self.pushover.envoyer_notification(notification):
                    self.alerte_temp_haute = True
                    
        else:
            if self.alerte_temp_basse or self.alerte_temp_haute:
                notification = NotificationMessage(
                    f"‚úÖ RETOUR NORMAL: Temp√©rature: {temp√©rature}¬∞C",
                    priorit√©=0
                )
                if self.pushover.envoyer_notification(notification):
                    self.alerte_temp_basse = False
                    self.alerte_temp_haute = False

    def _g√©rer_chauffage(self, donn√©es: Donn√©esEnvironnement) -> None:
        self.contr√¥ler_relais('chauffage', donn√©es.temp√©rature < SEUILS_ENVIRONNEMENT['temp_min'])
            

    def _g√©rer_ventilation(self, donn√©es: Donn√©esEnvironnement) -> None:
        ventilation_n√©cessaire = (
            donn√©es.temp√©rature > SEUILS_ENVIRONNEMENT['temp_max'] or
            (donn√©es.humidit√© > SEUILS_ENVIRONNEMENT['humid_max'] and
             SEUILS_ENVIRONNEMENT['temp_min'] < donn√©es.temp√©rature < SEUILS_ENVIRONNEMENT['temp_max'])
        )
        self.contr√¥ler_relais('ventilation', ventilation_n√©cessaire)

    def _g√©rer_brumisation(self, donn√©es: Donn√©esEnvironnement) -> None:
        brumisation_n√©cessaire = donn√©es.humidit√© < SEUILS_ENVIRONNEMENT['humid_normale']
        self.contr√¥ler_relais('brumisation', brumisation_n√©cessaire)

    def _g√©rer_eclairage(self) -> None:
        self.contr√¥ler_relais('eclairage', self.est_p√©riode_jour())

    def obtenir_√©tat(self) -> Dict[str, Any]:
        try:
            donn√©es = self._dernieres_donnees
            return {
                "temperature": f"{donn√©es.temp√©rature:.1f}" if donn√©es else "N/A",
                "humidite": f"{donn√©es.humidit√©:.1f}" if donn√©es else "N/A",
                "pression": f"{donn√©es.pression:.1f}" if donn√©es else "N/A",
                "chauffage": not GPIO.input(GPIO_CONFIG['chauffage']),
                "eclairage": not GPIO.input(GPIO_CONFIG['eclairage']),
                "ventilation": not GPIO.input(GPIO_CONFIG['ventilation']),
                "brumisation": not GPIO.input(GPIO_CONFIG['brumisation']),
                "derniere_mise_a_jour": datetime.now().isoformat(),
                "mode_securite": self.en_mode_s√©curit√©,
                "erreur": None
            }
        except Exception as e:
            self.logger.error(f"Erreur obtention √©tat: {str(e)}")
            return {
                "erreur": str(e),
                "derniere_mise_a_jour": datetime.now().isoformat()
            }

    def nettoyer(self) -> None:
        """Nettoyage des ressources."""
        self.logger.info("Nettoyage du syst√®me")
        try:
            for nom_relais in GPIO_CONFIG:
                self.contr√¥ler_relais(nom_relais, False)
            GPIO.cleanup()
            self.logger.info("Nettoyage termin√© avec succ√®s")
        except Exception as e:
            self.logger.error(f"Erreur pendant le nettoyage: {str(e)}")